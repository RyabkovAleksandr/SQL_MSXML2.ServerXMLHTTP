USE [admon]
GO
/****** Object:  StoredProcedure [dbo].[API_MS_SQL]    Script Date: 11/13/2024 11:44:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Создаем хранимую процедуру [API_MS_SQL] с различными параметрами для выполнения HTTP-запросов
ALTER PROC [dbo].[API_MS_SQL](
    @Verb           NVARCHAR(100), -- HTTP метод (например, GET, POST)
    @Url            NVARCHAR(1000), -- URL для запроса
    @AuthHeader     NVARCHAR(100) = NULL, -- Заголовок авторизации (опционально)
    @ContentType    NVARCHAR(100) = NULL, -- Тип содержимого (опционально)
    @Accept         NVARCHAR(100) = NULL, -- Заголовок Accept (опционально)
    @PostData       NVARCHAR(MAX) = NULL, -- Данные для POST-запроса (опционально)
    @Timeout        INT = NULL, -- Таймаут ожидания ответа в секундах (опционально)
	@PauseConect    INT = 0, -- Пауза перед запросом, ограничение запросов (опционально)
	@ResponseStatus BIT = 0, --Считывать статус ответа 200 OK (опционально)
	@LenRequest     BIGINT = NULL, --Проверка длинны ответа
	@MaxAttempts	INT = 0, -- Количество попыток если ошибка (опционально)
    @Status         INT = 666 OUTPUT, -- Переменная для хранения статуса ответа (выходной параметр)
    @StatusText     NVARCHAR(255) = 'нет ответа' OUTPUT, -- Переменная для хранения текста статуса (выходной параметр)
    @ResponseText   NVARCHAR(MAX) = NULL OUTPUT -- Переменная для хранения текста ответа (выходной параметр)
) WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT ON; -- Отключаем вывод количества строк, затронутых последним оператором

    -- Объявляем переменные для хранения промежуточных значений и результатов
    DECLARE @HObj INT = NULL; -- Переменная для хранения объекта HTTP-запроса
    DECLARE @HResult INT; -- Переменная для хранения результата выполнения методов
    DECLARE @TimeoutMs INT = @Timeout * 1000; -- Перевод таймаута в миллисекунды
	DECLARE @PauseConectT VARCHAR(8) = '00:00:00';  -- -- -- Перевод таймаута задержки между запросами, и использую для задержки между ошибками
	DECLARE @Attempts INT = 0; -- Первая попытка
    DECLARE @TmpGetProperty TABLE(Value NVARCHAR(MAX)); -- Временная таблица для хранения текста ответа

BEGIN TRY

        IF SUSER_NAME() <> 'sa' EXECUTE AS LOGIN = 'sa'; -- Устанавливаем контекст безопасности, если текущий пользователь не 'sa'

Request:
		IF @HObj IS NOT NULL EXEC dbo.sp_OADestroy @HObj;   -- Уничтожаем COM-объект, для повторного создания
        EXEC @HResult = dbo.sp_OACreate 'MSXML2.ServerXMLHTTP', @HObj OUTPUT;	-- Создаем COM-объект для выполнения HTTP-запроса

        IF @HResult <> 0 THROW 50000, 'Не удалось создать объект HTTP', 1;

        IF @TimeoutMs IS NOT NULL	-- Устанавливаем таймауты, если они заданы
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetTimeouts', NULL, @TimeoutMs, @TimeoutMs, @TimeoutMs, @TimeoutMs;
            IF @HResult <> 0 THROW 50001, 'Не удалось установить таймауты', 1;
        END

        IF @Status IS NOT NULL	-- Игнорируем ошибки серверных сертификатов, если задана статусная переменная
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetOption', NULL, 2, 13056;
            IF @HResult <> 0 THROW 50002, 'Не удалось установить параметры', 1;
        END

        EXEC @HResult = dbo.sp_OAMethod @HObj, 'Open', NULL, @Verb, @Url, 0;	-- Открываем соединение по заданному URL и методу
        IF @HResult <> 0 THROW 50003, 'Не удалось открыть соединение', 1;

			IF @AuthHeader IS NOT NULL	-- Устанавливаем заголовки, если они заданы
			BEGIN
				EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Authorization', @AuthHeader;
				IF @HResult <> 0 THROW 50004, 'Не удалось установить заголовок авторизации', 1;
			END

			IF @ContentType IS NOT NULL
			BEGIN
				EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Content-Type', @ContentType;
				IF @HResult <> 0 THROW 50005, 'Не удалось установить заголовок Content-Type', 1;
			END

			IF @Accept IS NOT NULL
			BEGIN
				EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Accept', @Accept;
				IF @HResult <> 0 THROW 50006, 'Не удалось установить заголовок Accept', 1;
			END
------------------------------------------------------------------------------------------------------------------------
	WHILE @Attempts < @MaxAttempts -- Цикл для повторных попыток выполнения запроса
		BEGIN
			SET @PauseConectT = CONVERT(VARCHAR(8), DATEADD(second, @Attempts * 59 + @PauseConect, '00:00:00'), 108);-- Пауза между запросами + пауза при ошибке
			WAITFOR DELAY @PauseConectT; -- Пауза между запросами + пауза при ошибке

			IF @PostData IS NOT NULL
			BEGIN
				EXEC @HResult = dbo.sp_OAMethod @HObj, 'Send', NULL, @PostData
			END
			ELSE
			BEGIN
				EXEC @HResult = dbo.sp_OAMethod @HObj, 'Send';

			END
			
			IF CAST(@HResult AS BIGINT) = 0 -- Успешное выполнение, перевожу в числовое.
			BEGIN
				BREAK; -- Выходим из цикла, если запрос выполнен успешно
			END
			ELSE -- Ошибка
			BEGIN
				SET @Attempts = @Attempts + 1;
				PRINT 100 + @Attempts
			END
	END -- Конец цикла

		-- Проверка после цикла, были ли исчерпаны все попытки
	IF @HResult <> 0
	BEGIN
		THROW 50007, 'Не удалось отправить запрос после нескольких попыток', 1;
	END-- Конец цикла для повторных попыток выполнения запроса
------------------------------------------------------------------------------------------------------------------------




		EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'Status', @Status OUTPUT; -- Получаем код статуса ответа 200
        IF @HResult <> 0 THROW 50008, 'Не удалось получить статус', 1;

        EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'StatusText', @StatusText OUTPUT; -- Получаем статус текст 
        IF @HResult <> 0 THROW 50009, 'Не удалось получить текст состояния', 1;

        IF CAST(@Status AS NVARCHAR(30)) + '' + @StatusText <> '200OK' AND @ResponseStatus = 1	-- Проверяем, что статус равен 200OK, StatusText может содержать дополнительные символы. Лучше сравнивать только @Status <> 200
			BEGIN
			SET @Attempts = @Attempts + 1;
			PRINT 200 + @Attempts
			IF @Attempts >= @MaxAttempts THROW 50010, 'Ошибка статусов 200OK', 1;
			GOTO Request
        END

        INSERT @TmpGetProperty	-- Получаем текст ответа и сохраняем в таблице
        EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'ResponseText';
        IF @HResult <> 0 THROW 50011, 'Не удалось получить текст ответа', 1;

        SELECT TOP 1 @ResponseText = Value FROM @TmpGetProperty;	-- Извлекаем текст ответа из временной таблицы

		 IF len(@ResponseText) < @LenRequest AND @LenRequest IS NOT NULL	-- Проверка длинну текста
			BEGIN
			SET @Attempts = @Attempts + 1;
			PRINT 500 + @Attempts
			IF @Attempts >= @MaxAttempts THROW 50012, 'Ошибка короткая длинна ответа', 1;
			GOTO Request
        END

END TRY
BEGIN CATCH

SET @ResponseText=null;

DECLARE @ErrorMessage NVARCHAR(MAX);
    SET @ErrorMessage = 
        'URL ' + ISNULL(@Url, 'NULL') + 
        ' Statys ' + ISNULL(CAST(@Status AS NVARCHAR(30)), 'NULL') + 
        ' StatysText ' + ISNULL(@StatusText, 'NULL') + 
        ' Pause ' + ISNULL(@PauseConectT, 'NULL') + 
        ' Result ' + ISNULL(CAST(@HResult AS VARCHAR(10)), 'NULL') + 
        ' ErrorMessage ' + CAST(@@ERROR AS NVARCHAR(10)) + 
        ' ErrorNumber ' + CAST(ERROR_NUMBER() AS NVARCHAR(10)) + 
        ' ErrorSeverity ' + CAST(ERROR_SEVERITY() AS NVARCHAR(10)) + 
        ' ErrorState ' + CAST(ERROR_STATE() AS NVARCHAR(10)) + 
        ' ErrorProcedure ' + ISNULL(ERROR_PROCEDURE(), 'NULL') + 
        ' ErrorLine ' + CAST(ERROR_LINE() AS NVARCHAR(10)) + 
        ' ErrorMessage ' + ERROR_MESSAGE();

    PRINT @ErrorMessage;
END CATCH

    -- Уничтожаем COM-объект, если он был создан
    IF @HObj IS NOT NULL
    BEGIN
        EXEC dbo.sp_OADestroy @HObj;
    END

    --RETURN; -- Возвращаем код возврата
END
