USE [admon]
GO
/****** Object:  StoredProcedure [dbo].[GET_API_OPT]    Script Date: 10/4/2024 8:21:54 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[GET_API_OPT](
    @Verb           VARCHAR(100),
    @Url            VARCHAR(1000),
    @AuthHeader     VARCHAR(100) = NULL,
    @ContentType    VARCHAR(100) = NULL,
    @Accept         VARCHAR(100) = NULL,
    @PostData       NVARCHAR(MAX) = NULL,
    @Timeout        INT = 30, --здесь нужен нулл, что бы исключить кусок таймаута
    @NoRaiseError   BIT = 0,
    @Status         INT = NULL OUTPUT, --может type так исключу ошибки добавить бы ещё один вариант запроса
    @StatusText     VARCHAR(255) = NULL OUTPUT,
    @ResponseText   NVARCHAR(MAX) = NULL OUTPUT
) WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT on;

    DECLARE @RetVal INT = 0;
    DECLARE @HObj INT = NULL;
    DECLARE @HResult INT;
    DECLARE @TimeoutMs INT = @Timeout * 1000;
    DECLARE @ErrSource VARCHAR(255);
    DECLARE @ErrDescription VARCHAR(1000);
    DECLARE @TmpGetProperty TABLE(Value NVARCHAR(MAX));

    BEGIN TRY
        -- Устанавливаем контекст безопасности
        IF SUSER_NAME() <> 'sa' EXECUTE AS LOGIN = 'sa';

        -- Создаем объект для HTTP-запроса
        EXEC @HResult = dbo.sp_OACreate 'MSXML2.ServerXMLHTTP', @HObj OUTPUT;
        IF @HResult <> 0 THROW 50000, 'Failed to create HTTP object', 1;

        -- Устанавливаем таймауты, если они заданы
        IF @TimeoutMs IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetTimeouts', NULL, @TimeoutMs, @TimeoutMs, @TimeoutMs, @TimeoutMs;
            IF @HResult <> 0 THROW 50001, 'Failed to set timeouts', 1;
        END

        -- Игнорируем ошибки серверных сертификатов (если задана статусная переменная)
        IF @Status IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetOption', NULL, 2, 13056;
            IF @HResult <> 0 THROW 50002, 'Failed to set options', 1;
        END

        -- Открываем соединение по заданному URL и методу
        EXEC @HResult = dbo.sp_OAMethod @HObj, 'Open', NULL, @Verb, @Url, 0;
        IF @HResult <> 0 THROW 50003, 'Failed to open connection', 1;

        -- Устанавливаем заголовки, если они заданы
        IF @AuthHeader IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Authorization', @AuthHeader;
            IF @HResult <> 0 THROW 50004, 'Failed to set Authorization header', 1;
        END

        IF @ContentType IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Content-Type', @ContentType;
            IF @HResult <> 0 THROW 50005, 'Failed to set Content-Type header', 1;
        END

        IF @Accept IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'SetRequestHeader', NULL, 'Accept', @Accept;
            IF @HResult <> 0 THROW 50006, 'Failed to set Accept header', 1;
        END

        -- Отправляем данные запроса (если они существуют)
        IF @PostData IS NOT NULL
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'Send', NULL, @PostData;
            IF @HResult <> 0 THROW 50007, 'Failed to send POST data', 1;
        END
        ELSE
        BEGIN
            EXEC @HResult = dbo.sp_OAMethod @HObj, 'Send';
            IF @HResult <> 0 THROW 50008, 'Failed to send request', 1;
        END

        -- Получаем статусы и текст ответа
        EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'Status', @Status OUTPUT;
        IF @HResult <> 0 THROW 50009, 'Failed to get status', 1;

        EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'StatusText', @StatusText OUTPUT;
        IF @HResult <> 0 THROW 50010, 'Failed to get status text', 1;

		 -- Проверка статуса --проверка статуса в параметр
        IF CAST(@Status AS VARCHAR(30)) + ' ' + @StatusText <> '200 OK'
        BEGIN
            THROW 50011, 'Ошибка: статус не равен 200 OK', 1;
        END


        -- Получаем текст ответа и сохраняем в таблице
        INSERT @TmpGetProperty
        EXEC @HResult = dbo.sp_OAGetProperty @HObj, 'ResponseText';
        IF @HResult <> 0 THROW 50012, 'Failed to get response text', 1;

        SELECT TOP 1 @ResponseText = Value FROM @TmpGetProperty;
    END TRY
    BEGIN CATCH
        SELECT @RetVal = 1,
               @ErrSource = CONVERT(VARCHAR(50), ERROR_LINE()),
               @ErrDescription = RTRIM(REPLACE(ERROR_MESSAGE(), CHAR(13) + CHAR(10), ' ')),
               @StatusText = @ErrDescription;

        IF COALESCE(@NoRaiseError, 0) = 0
        BEGIN
            RAISERROR('Error on line %s: %s', 16, 1, @ErrSource, @ErrDescription);
        END
    END CATCH

    -- Уничтожаем COM объект
    IF @HObj IS NOT NULL
    BEGIN
        EXEC dbo.sp_OADestroy @HObj;
    END

    RETURN @RetVal;
END
